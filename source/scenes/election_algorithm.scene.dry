title: Election
on-arrival: {!
// Normalize class support (0â€“100)
for (var c of classes) {
    var class_votes = 0;
    for (var party of parties) {
        if (this[c + '_' + party] < 0) this[c + '_' + party] = 0;
        class_votes += this[c + '_' + party];
    }
    for (var party of parties) {
        this[c + '_' + party + '_normalized'] = 100 * this[c + '_' + party] / class_votes;
        this[c + '_' + party + '_display'] = Math.round(100 * this[c + '_' + party] / class_votes);
    }
}
// Reset Senate seats
for (var party of parties) {
    this[party + '_senate_seats'] = 0;
}
// State-level support and seat allocation
for (var state of states) {
    var state_support = [];
    for (var party of parties) {
        var support = 0;
        for (var c of classes) {
            var pop = this[state + '_' + c] || 0;
            support += pop * (this[c + '_' + party + '_normalized'] || 0);
        }
        state_support.push({ party: party, support: support });
    }
    state_support.sort((a, b) => b.support - a.support);
    this[state + '_senate_winner_1'] = state_support[0].party;
    this[state + '_senate_winner_2'] = state_support[1].party;
    this[state_support[0].party + '_senate_seats'] += 1;
    this[state_support[1].party + '_senate_seats'] += 1;
}
// Final vote total calculation
rep_votes = this["rep_senate_seats"];
dem_votes = this["dem_senate_seats"];
other_votes = (this["lib_senate_seats"] || 0) + (this["green_senate_seats"] || 0);
if (other_votes > 2) {
    other_votes = 2;
}
vac_r = 0; // adjust manually for ties/unfilled
!}
go-to: jumpScene



