title: Election
on-arrival: {!
// Election simulation logic

// 1. Normalize class-based party support (per class, sum to 100)
for (let c of Q.classes) {
    let total = 0;

    for (let party of Q.parties) {
        if (Q[c + '_' + party] < 0) Q[c + '_' + party] = 0;
        total += Q[c + '_' + party];
    }

    for (let party of Q.parties) {
        let norm = (100 * Q[c + '_' + party]) / total;
        Q[c + '_' + party + '_normalized'] = norm;
        Q[c + '_' + party + '_display'] = Math.round(norm);
    }
}

// 2. Calculate national party support
let total_support = 0;

for (let party of Q.parties) {
    let support = 0;

    for (let c of Q.classes) {
        let class_pop = Q[c] || 0;
        let weight = Q.old_demographics
            ? Q[c + '_' + party]  // raw support if old mode
            : Q[c + '_' + party + '_normalized'];  // normalized if new mode

        support += class_pop * weight;
    }

    Q[party + '_support'] = support;
    total_support += support;
}

// 3. Normalize, round, and display vote shares
for (let party of Q.parties) {
    let norm = Q[party + '_support'] / total_support;
    let dec = Math.round(norm * 1000) / 10;

    Q[party + '_normalized'] = norm;
    Q[party + '_votes_dec'] = dec;

    if (Q.use_decimals) {
        Q[party + '_votes'] = dec;
        Q[party + '_votes_disp'] = dec;
    } else {
        Q[party + '_votes'] = Math.round(norm * 100);
        Q[party + '_votes_disp'] = dec.toFixed(1);
    }
}
!}
go-to: jumpScene
