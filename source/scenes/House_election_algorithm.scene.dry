title: House Election
on-arrival: {!

Q.rep_r = 0;
Q.dem_r = 0;
Q.other_r = 0;

let repVotes = 0;
let demVotes = 0;
let otherVotes = 0;

for (let state of Q.states) {
  for (let cls of Q.classes) {
    let pop = Q[state + "_" + cls] || 0;

    // Local support (from state)
    let rep = Q[state + "_" + cls + "_rep"] || 0;
    let dem = Q[state + "_" + cls + "_dem"] || 0;
    let other = Q[state + "_" + cls + "_other"] || 0;

    // National modifiers (from root-level vars like 'freemen_rep')
    let repMod = Q[cls + "_rep"] || 0;
    let demMod = Q[cls + "_dem"] || 0;
    let otherMod = Q[cls + "_other"] || 0;

    // Blend local + national: 80% state value, 20% national
    let adjRep = 0.8 * rep + 0.2 * repMod;
    let adjDem = 0.8 * dem + 0.2 * demMod;
    let adjOther = 0.8 * other + 0.2 * otherMod;

    let totalPct = adjRep + adjDem + adjOther;
    if (totalPct === 0) continue;

    repVotes += pop * (adjRep / totalPct);
    demVotes += pop * (adjDem / totalPct);
    otherVotes += pop * (adjOther / totalPct);
  }
}

// Normalize vote shares and allocate seats
let totalVotes = repVotes + demVotes + otherVotes;
let totalSeats = Q.total_house_seats || 241;

let repShare = repVotes / totalVotes;
let demShare = demVotes / totalVotes;
let otherShare = otherVotes / totalVotes;

let repSeats = Math.floor(repShare * totalSeats);
let demSeats = Math.floor(demShare * totalSeats);
let otherSeats = totalSeats - repSeats - demSeats; // balance exactly

Q.rep_r = repSeats;
Q.dem_r = demSeats;
Q.other_r = otherSeats;

console.log(rep_r, dem_r, other_r)

!}
