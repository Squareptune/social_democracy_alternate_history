title: Election
on-arrival: {!

// Reset Senate seat tallies
rep_senate_r = 0;
dem_senate_r = 0;
other_senate_r = 0;

for (let state of Q.states) {
    let stateRep = 0;
    let stateDem = 0;
    let stateOther = 0;

    for (let cls of Q.classes) {
        let pop = get(state + "_" + cls) || 0;
        let rep = get(state + "_" + cls + "_rep") || 0;
        let dem = get(state + "_" + cls + "_dem") || 0;
        let other = get(state + "_" + cls + "_other") || 0;
        let totalPct = rep + dem + other;
        if (totalPct === 0) continue;

        stateRep += pop * (rep / totalPct);
        stateDem += pop * (dem / totalPct);
        stateOther += pop * (other / totalPct);
    }

    let total = stateRep + stateDem + stateOther;
    let repPct = (stateRep / total) * 100;
    let demPct = (stateDem / total) * 100;
    let otherPct = (stateOther / total) * 100;

    // Determine rankings
    let margins = [
        { party: "rep", pct: repPct },
        { party: "dem", pct: demPct },
        { party: "other", pct: otherPct }
    ];
    margins.sort((a, b) => b.pct - a.pct);

    let first = margins[0];
    let second = margins[1];
    let repSeats = 0, demSeats = 0, otherSeats = 0;

    if (first.pct >= 66) {
        if (first.party === "rep") repSeats = 2;
        else if (first.party === "dem") demSeats = 2;
        else otherSeats = 2;
    } else if (first.pct >= 55 && (first.pct - second.pct) > 10) {
        if (first.party === "rep") repSeats = 2;
        else if (first.party === "dem") demSeats = 2;
        else otherSeats = 2;
    } else if ((first.pct - second.pct) <= 12) {
        if (first.party === "rep") repSeats = 1;
        else if (first.party === "dem") demSeats = 1;
        else otherSeats = 1;

        if (second.party === "rep") repSeats++;
        else if (second.party === "dem") demSeats++;
        else otherSeats++;
    } else {
        if (first.party === "rep") repSeats = 2;
        else if (first.party === "dem") demSeats = 2;
        else otherSeats = 2;
    }

    // Tally seats
    rep_senate_r += repSeats;
    dem_senate_r += demSeats;
    other_senate_r += otherSeats;
}

// Determine majority party
largest_party = "rep";
if (dem_senate_r >= rep_senate_r && dem_senate_r >= other_senate_r) {
    largest_party = "dem";
}
if (other_senate_r >= rep_senate_r && other_senate_r >= dem_senate_r) {
    largest_party = "other";
}

// Store results for display
display_rep_senate = rep_senate_r;
display_dem_senate = dem_senate_r;
display_other_senate = other_senate_r;

!}

go-to: jumpScene
