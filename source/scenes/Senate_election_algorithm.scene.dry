title: Senate Election
on-arrival: {!

Q.rep_senate_r = 0;
Q.dem_senate_r = 0;
Q.other_senate_r = 0;

for (let state of Q.states) {
  let repVotes = 0;
  let demVotes = 0;
  let otherVotes = 0;

  for (let cls of Q.classes) {
    let pop = Q[state + "_" + cls] || 0;

    // Local support
    let localRep = Q[state + "_" + cls + "_rep"] || 0;
    let localDem = Q[state + "_" + cls + "_dem"] || 0;
    let localOther = Q[state + "_" + cls + "_other"] || 0;

    // National support
    let nationalRep = Q[cls + "_rep"] || 0;
    let nationalDem = Q[cls + "_dem"] || 0;
    let nationalOther = Q[cls + "_other"] || 0;

    // Blend 80% local, 20% national
    let adjRep = 0.5 * localRep + 0.5 * nationalRep;
    let adjDem = 0.5 * localDem + 0.5 * nationalDem;
    let adjOther = 0.5 * localOther + 0.5 * nationalOther;

    let total = adjRep + adjDem + adjOther;
    if (total === 0) continue;

    repVotes += pop * (adjRep / total);
    demVotes += pop * (adjDem / total);
    otherVotes += pop * (adjOther / total);
  }

  let totalVotes = repVotes + demVotes + otherVotes;
  if (totalVotes === 0) continue;

  let repPct = (repVotes / totalVotes) * 100;
  let demPct = (demVotes / totalVotes) * 100;
  let otherPct = (otherVotes / totalVotes) * 100;

  let results = [
    { party: "rep", pct: repPct },
    { party: "dem", pct: demPct },
    { party: "other", pct: otherPct }
  ];
  results.sort((a, b) => b.pct - a.pct);

  let first = results[0];
  let second = results[1];
  let repSeats = 0, demSeats = 0, otherSeats = 0;

  // Seat distribution rules
  if (first.pct >= 66) {
    if (first.party === "rep") repSeats = 2;
    else if (first.party === "dem") demSeats = 2;
    else otherSeats = 2;
  } else if (first.pct >= 55 && (first.pct - second.pct) > 10) {
    if (first.party === "rep") repSeats = 2;
    else if (first.party === "dem") demSeats = 2;
    else otherSeats = 2;
  } else if ((first.pct - second.pct) <= 12) {
    if (first.party === "rep") repSeats = 1;
    else if (first.party === "dem") demSeats = 1;
    else otherSeats = 1;

    if (second.party === "rep") repSeats++;
    else if (second.party === "dem") demSeats++;
    else otherSeats++;
  } else {
    if (first.party === "rep") repSeats = 2;
    else if (first.party === "dem") demSeats = 2;
    else otherSeats = 2;
  }

  Q.rep_senate_r += repSeats;
  Q.dem_senate_r += demSeats;
  Q.other_senate_r += otherSeats;
}

// Update majority tracking variables
Q.largest_party = "rep";
if (Q.dem_senate_r >= Q.rep_senate_r && Q.dem_senate_r >= Q.other_senate_r) {
  Q.largest_party = "dem";
}
if (Q.other_senate_r >= Q.rep_senate_r && Q.other_senate_r >= Q.dem_senate_r) {
  Q.largest_party = "other";
}

!}
go-to: jumpScene