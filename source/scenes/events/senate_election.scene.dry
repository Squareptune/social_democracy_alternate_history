title: Senate Elections
new-page: true
tags: event
priority: -1
view-if: (year = next_senate_election_year and month >= next_senate_election_month) or (year > next_senate_election_year)
on-departure: month_actions += 1; in_election = 0; next_senate_election_year += 2; n_elections += 1; next_senate_election_time = time + 24;
set-jump: post_election_1928

= Elections, [+ month : month +] [+ year +]

The Senate elections are to be held now.

- @Senate_election_algorithm: May we do our best...

@post_election_1928
on-arrival: {!
Q.rep_senate_r = 0;
Q.dem_senate_r = 0;
Q.other_senate_r = 0;

// Constants and state
Q.TOTAL_SEATS = Q.TOTAL_SEATS || 72;
Q.VACANT_SEATS = Q.vacant_senate || 0;
Q.vacant_senate_r = Q.VACANT_SEATS;

let partyVotes = {};
// Initialize votes
for (let party of Q.parties) {
  partyVotes[party] = 0;
}

// Calculate weighted votes by state, class, and party support
for (let state of Q.states) {
  for (let cls of Q.classes) {
    let pop = Q[state + "_" + cls] || 0;
    for (let party of Q.parties) {
      let supportKey = cls + "_" + party;
      let support = Q[supportKey] || 0;
      partyVotes[party] += (pop * support) / 100;
    }
  }
}

// Sum total votes for normalization
let totalVotes = 0;
for (let party of Q.parties) {
  totalVotes += partyVotes[party];
}

// If total votes zero, assign equal shares
if (totalVotes === 0) {
  let equalShare = Math.round(Q.TOTAL_SEATS / Q.parties.length);
  for (let party of Q.parties) {
    Q[party + "_senate_r"] = equalShare;
  }
} else {
  let seatsToAllocate = Q.TOTAL_SEATS - Q.VACANT_SEATS;

  for (let party of Q.parties) {
    Q[party + "_votes"] = partyVotes[party];  // Save raw votes

    if (Q.constitution_reform > 0) {
      let threshold = Q.electoral_threshold || 0;
      let banned = Q[party + "_banned"] || false;
      let votePercent = (partyVotes[party] / totalVotes) * 100;
      let belowThreshold = votePercent < threshold;

      if (belowThreshold || (threshold > 1 && party === "other") || banned) {
        Q[party + "_senate_r"] = 0;
      } else {
        Q[party + "_senate_r"] = Math.round(partyVotes[party] * seatsToAllocate / totalVotes);
      }
    } else {
      Q[party + "_senate_r"] = Math.round(partyVotes[party] * seatsToAllocate / totalVotes);
    }
  }
}
// Now handle old values, changes, and formatted strings all together
for (let party of Q.parties) {
  Q["old_" + party + "_senate_r"] = Q["old_" + party + "_senate_r"] || 0;  // Ensure old is defined
  // Calculate changes
  Q["change_" + party + "_senate_r"] = Q[party + "_senate_r"] - Q["old_" + party + "_senate_r"];
  // Format sign strings
  let sign = Q["change_" + party + "_senate_r"] > 0 ? "+" : "";
  Q["str_change_" + party] = sign + Q["change_" + party + "_senate_r"];
  // For display
  if (Q.use_decimals) {
    Q[party + "_senate_r_disp"] = Q[party + "_senate_r"].toFixed(1);
  } else {
    Q[party + "_senate_r_disp"] = Q[party + "_senate_r"];
  }
}
// Vacant seats changes and string formatting
Q["old_vacant_senate_r"] = Q["old_vacant_senate_r"] || 0;
Q.change_vacant_senate_r = Q.vacant_senate - Q["old_vacant_senate_r"];
Q.str_change_vacant = (Q.change_vacant_senate_r >= 0 ? "+" : "") + Q.change_vacant_senate_r;
Q.old_vacant_senate_r = Q.vacant_senate;
// Determine largest party by seats
Q.largest_party = "rep";
if (Q.dem_senate_r >= Q.rep_senate_r && Q.dem_senate_r >= Q.other_senate_r) {
  Q.largest_party = "dem";
}
if (Q.other_senate_r >= Q.rep_senate_r && Q.other_senate_r >= Q.dem_senate_r) {
  Q.largest_party = "other";
}
// Store majorities for checks
Q.republican_majority = Q.rep_senate_r;
Q.democrat_majority = Q.dem_senate_r;
Q.other_majority = Q.other_senate_r;
// Record the election results (optional array you can display later)
let electionResult = { date: Q.year + "-" + Q.month };
for (let party of Q.parties) {
  electionResult[party] = Q[party + "_senate_r"];
}
Q.election_records = Q.election_records || [];
Q.election_records.push(electionResult);

// For display variables outside JS sections:
Q.display_rep_senate = Q.rep_senate_r;
Q.display_dem_senate = Q.dem_senate_r;
Q.display_other_senate = Q.other_senate_r;
Q.display_vacant_senate = Q.vacant_senate;
!}
on-display: {!
  function loadScript(src, callback) {
    var script = document.createElement('script');
    script.src = src;
    script.onload = callback;
    document.head.appendChild(script);
  }

  function drawChart() {
    var chartData = [
      {
        id: "republicans",
        seats: Math.round(Q.rep_senate_r),
        color: "#E3000F",
        outline: "#E3000F"
      },
      {
        id: "democrats",
        seats: Math.round(Q.dem_senate_r),
        color: "#0015BC",
        outline: "#0015BC"
      },
      {
        id: "others",
        seats: Math.round(Q.other_senate_r),
        color: "#00cc00",
        outline: "#a0a0a0"
      },
      {
        id: "vacants",
        seats: Q.vacant_senate_r,
        color: "#DCCA4A",
        outline: "#777777"
      }
    ].filter(d => d.seats > 0);

    var width = Math.min(500, document.getElementById('content').offsetWidth - 50);

    var container = d3.select("#reichstag");
    if (container.empty()) {
      container = d3.select("#content").append("svg").attr("id", "reichstag");
    }
    container.attr("width", width)
             .attr("height", width / 2)
             .html("");

    var parliament = d3.parliament()
      .width(width)
      .innerRadiusCoef(0.4);
    container.data([chartData]).call(parliament);
  }

  if (!window.d3) {
    loadScript('https://d3js.org/d3.v7.min.js', function() {
      loadScript('https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js', drawChart);
    });
  } else if (!window.d3.parliament) {
    loadScript('https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js', drawChart);
  } else {
    drawChart();
  }
!}
go-to: coalition_menu

= Election results

{!<svg id="reichstag" style="width: 500px; height: 250px;"> </svg>!}

{!<table>!} 
{!<tr><td>Party</td><td>Seats</td><td> Change</td></tr>!}
{!<tr><td><div class="box" style='background-color:#E3000F; outline: 2px solid;'> </div> !} **Republicans:** {!</td><td>!} **[+ display_rep_senate +] seats** {!</td><td>!} **[+ str_change_rep_senate_r +]** {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#0015BC'> </div> !} Democrats: {!</td><td>!} [+ display_dem_senate +] seats {!</td><td>!} [+ str_change_dem_senate_r +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#00cc00'> </div> !} Others: {!</td><td>!} [+ display_other_senate +] seats {!</td><td>!} [+ str_change_other_senate_r +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#DCCA4A'> </div> !} Vacants: {!</td><td>!} [+ display_vacant_senate +] seats {!</td><td>!} [+ str_change_vacant +] {!</td></tr>!}
{!</table>!}

@coalition_menu

- @simple_majority
- @super_majority
- @defeat
- @tie

@simple_majority
title: Republicans get a simple majority
subtitle: Repubicans: [+ rep_senate_r +] seats
view-if: {! 
rep_senate_r > num_states && rep_senate_r < Math.ceil(Q.num_states * 2 * (2/3))
!}
on-arrival: sen_majority = 1;

The Republicans have gained a simple majority in the Senate!

@super_majority
title: Republicans get a super majority
subtitle: Repubicans: [+ rep_senate_r +] seats
view-if: {!
rep_senate_r >= Math.ceil(Q.num_states * 2 * (2/3))
!}
on-arrival: sen_majority = 1;

The Republicans have gained a supermajority in the Senate! Now they can override any presidential veto.

@defeat
title: Republicans have lost the election
subtitle: Repubicans: [+ rep_senate_r +] seats
view-if: dem_senate_r > rep_senate_r 
on-arrival: sen_majority = 0;

The Republicans have lost control of the Senate to the Democrats.

@tie
title: A TIE?!?!?!?
subtitle: I guess there is no government today
view-if: rep_senate_r = dem_senate_r
on-arrival: sen_majority = 0;

In a complete shock, the Senate election has ended in a tie! [? if president_party = rep: But we have the VP on our side who can serve as the tiebreaking vote ?][? if president_party = dem: But the democrats have the VP their our side who can serve as the tiebreaking vote ?]
