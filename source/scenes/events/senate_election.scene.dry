title: Senate Elections
new-page: true
tags: event
priority: -1
view-if: (year = next_senate_election_year and month >= next_senate_election_month) or (year > next_senate_election_year)
on-departure: {
    month_actions += 1;
    in_election = 0;
    next_senate_election_year += 2;
    n_elections += 1;
    next_senate_election_time = time + 24;
}
set-jump: post_election_1928

= Elections, [+ month : month +] [+ year +]

The Senate elections are to be held now.

- @Senate_election_algorithm: May we do our best...

@post_election_1928
on-arrival: {!

// Reset seat counts
rep_senate_r = 0;
dem_senate_r = 0;
other_senate_r = 0;

TOTAL_SEATS = TOTAL_SEATS or 72;
VACANT_SEATS = vacant_senate or 0;
vacant_senate_r = VACANT_SEATS;

// Save old results
for party in parties {
    set("old_" + party + "_senate_r", get(party + "_senate_r") or 0);
}

// Initialize vote totals
partyVotes = {};
for party in parties {
    partyVotes[party] = 0;
}

// Calculate weighted votes by state, class, and party support
for state in states {
    for cls in classes {
        pop = get(state + "_" + cls) or 0;
        for party in parties {
            supportKey = cls + "_" + party;
            support = get(supportKey) or 0;
            partyVotes[party] += (pop * support) / 100;
        }
    }
}

// Sum total votes
totalVotes = 0;
for party in parties {
    totalVotes += partyVotes[party];
}

// If total votes zero, assign equal shares
if totalVotes = 0 {
    equalShare = round(TOTAL_SEATS / length(parties));
    for party in parties {
        set(party + "_senate_r", equalShare);
    }
} else {
    seatsToAllocate = TOTAL_SEATS - VACANT_SEATS;
    for party in parties {
        rawVotes = partyVotes[party];
        if constitution_reform > 0 {
            threshold = electoral_threshold or 0;
            banned = get(party + "_banned") or false;
            belowThreshold = (rawVotes / totalVotes) * 100 < threshold;

            if belowThreshold or (threshold > 1 and party = "other") or banned {
                set(party + "_senate_r", 0);
            } else {
                seats = round(rawVotes * seatsToAllocate / totalVotes);
                set(party + "_senate_r", seats);
            }
        } else {
            seats = round(rawVotes * seatsToAllocate / totalVotes);
            set(party + "_senate_r", seats);
        }
    }
}

// Set display and calculate changes
for party in parties {
    curSeats = get(party + "_senate_r") or 0;
    oldSeats = get("old_" + party + "_senate_r") or 0;
    set(party + "_senate_r_disp", curSeats);
    change = curSeats - oldSeats;
    set("change_" + party + "_senate_r", change);
    sign = change > 0 ? "+" : "";
    set("str_change_" + party, sign + change);
}

// Vacant seat changes
change_vacant = vacant_senate_r - (old_vacant_senate_r or 0);
str_change_vacant = (change_vacant >= 0 ? "+" : "") + change_vacant;
old_vacant_senate_r = vacant_senate_r;

// Determine largest party
largest_party = "rep";
if dem_senate_r >= rep_senate_r and dem_senate_r >= other_senate_r {
    largest_party = "dem";
}
if other_senate_r >= rep_senate_r and other_senate_r >= dem_senate_r {
    largest_party = "other";
}

// Store majorities
republican_majority = rep_senate_r;
democrat_majority = dem_senate_r;
other_majority = other_senate_r;

// Record election result
result = {date: year + "-" + month};
for party in parties {
    result[party] = get(party + "_senate_r") or 0;
}
election_records.append(result);

display_rep_senate = rep_senate_r;
display_dem_senate = dem_senate_r;
display_other_senate = other_senate_r;
display_vacant_senate = vacant_senate_r;
!}
on-display: {!
  function loadScript(src, callback) {
    var script = document.createElement('script');
    script.src = src;
    script.onload = callback;
    document.head.appendChild(script);
  }

  function drawChart() {
    var chartData = [
      {
        id: "republicans",
        seats: Math.round(Q.rep_senate_r),
        color: "#E3000F",
        outline: "#E3000F"
      },
      {
        id: "democrats",
        seats: Math.round(Q.dem_senate_r),
        color: "#0015BC",
        outline: "#0015BC"
      },
      {
        id: "others",
        seats: Math.round(Q.other_senate_r),
        color: "#00cc00",
        outline: "#a0a0a0"
      },
      {
        id: "vacants",
        seats: Q.vacant_senate_r,
        color: "#DCCA4A",
        outline: "#777777"
      }
    ].filter(d => d.seats > 0);

    var width = Math.min(500, document.getElementById('content').offsetWidth - 50);

    var container = d3.select("#reichstag");
    if (container.empty()) {
      container = d3.select("#content").append("svg").attr("id", "reichstag");
    }
    container.attr("width", width)
             .attr("height", width / 2)
             .html("");

    var parliament = d3.parliament()
      .width(width)
      .innerRadiusCoef(0.4);
    container.data([chartData]).call(parliament);
  }

  if (!window.d3) {
    loadScript('https://d3js.org/d3.v7.min.js', function() {
      loadScript('https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js', drawChart);
    });
  } else if (!window.d3.parliament) {
    loadScript('https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js', drawChart);
  } else {
    drawChart();
  }
!}
go-to: coalition_menu

= Election results

{!<svg id="reichstag" style="width: 500px; height: 250px;"> </svg>!}

{!<table>!} 
{!<tr><td>Party</td><td>Vote share</td><td>% Change</td></tr>!}
{!<tr><td><div class="box" style='background-color:#E3000F; outline: 2px; outline-style: solid;'> </div> !} **Republicans:** {!</td><td>!} **[+ display_rep_senate +] seats** {!</td><td>!} **[+ str_change_rep +]** {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#0015BC'> </div> !}Democrats: {!</td><td>!} [+ dem_senate_r +] seats {!</td><td>!} [+ display_dem_senate +] {!</td></tr>!}
 
{!<tr><td><div class="box" style='background-color:#a0a0a0'> </div> !} Others: {!</td><td>!} [+ other_senate_r +] seats {!</td><td>!} [+ display_other_senate +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#DCCA4A'> </div> !} Vacants: {!</td><td>!} [+ vacant_senate +] seats {!</td><td>!} [+ display_vacant_senate +] {!</td></tr>!}
{!</table>!}

@coalition_menu

- @simple_majority
- @super_majority
- @defeat
- @tie

@simple_majority
title: Republicans get a simple majority
subtitle: Repubicans: [+ rep_senate_r +] seats
view-if: {! (Q.rep_senate_r >= Math.floor(TOTAL_SEATS / 2) + 1) !}
on-arrival: sen_majority = 1;

The Republicans have gained a simple majority in the Senate!

@super_majority
title: Republicans get a super majority
subtitle: Repubicans: [+ rep_senate_r +] seats
view-if: {! (Q.rep_senate_r >= Math.floor(TOTAL_SEATS * 2 / 3)) !}
on-arrival: sen_majority = 1;

The Republicans have gained a supermajority in the Senate! Now they can override any presidential veto.

@defeat
title: Republicans have lost the election
subtitle: Repubicans: [+ rep_senate_r +] seats
view-if: dem_senate_r > rep_senate_r 
on-arrival: sen_majority = 0;

The Republicans have lost control of the Senate to the Democrats.

@tie
title: A TIE?!?!?!?
subtitle: I guess there is no government today
view-if: rep_senate_r = dem_senate_r
on-arrival: sen_majority = 0;

In a complete shock, the Senate election has ended in a tie! [? if president_party = rep: But we have the VP on our side who can serve as the tiebreaking vote ?][? if president_party = dem: But the democrats have the VP their our side who can serve as the tiebreaking vote ?]
