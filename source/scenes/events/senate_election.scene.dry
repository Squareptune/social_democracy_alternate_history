title: Senate Elections
new-page: true
tags: event
priority: -1
view-if: (year = next_senate_election_year and month >= next_senate_election_month) or (year > next_senate_election_year)
on-departure: month_actions += 1; in_election = 0; next_senate_election_year += 2; n_elections += 1; next_senate_election_time = time + 24;

= Elections, [+ month : month +] [+ year +]

The Senate elections are to be held now.

- @Senate_election_algorithm: May we do our best...

@Senate_election_algorithm
on-arrival: {!

  // === 1. Save old seat values ===
  for (let party of Q.parties) {
    Q["old_" + party + "_senate_r"] = Q[party + "_senate_r"] || 0;
  }

  // === 2. Reset totals ===
  Q.rep_senate_r = 0;
  Q.dem_senate_r = 0;
  Q.other_senate_r = 0;

  // === 3. Recalculate state-by-state ===
  for (let state of Q.states) {
    let repVotes = 0;
    let demVotes = 0;
    let otherVotes = 0;

    for (let cls of Q.classes) {
      let pop = Q[state + "_" + cls] || 0;

      // Local support
      let localRep = Q[state + "_" + cls + "_rep"] || 0;
      let localDem = Q[state + "_" + cls + "_dem"] || 0;
      let localOther = Q[state + "_" + cls + "_other"] || 0;

      // National support
      let nationalRep = Q[cls + "_rep"] || 0;
      let nationalDem = Q[cls + "_dem"] || 0;
      let nationalOther = Q[cls + "_other"] || 0;

      // Blend: 80% local, 20% national
      let adjRep = 0.8 * localRep + 0.2 * nationalRep;
      let adjDem = 0.8 * localDem + 0.2 * nationalDem;
      let adjOther = 0.8 * localOther + 0.2 * nationalOther;

      let total = adjRep + adjDem + adjOther;
      if (total === 0) continue;

      repVotes += pop * (adjRep / total);
      demVotes += pop * (adjDem / total);
      otherVotes += pop * (adjOther / total);
    }

    let totalVotes = repVotes + demVotes + otherVotes;
    if (totalVotes === 0) continue;

    let repPct = (repVotes / totalVotes) * 100;
    let demPct = (demVotes / totalVotes) * 100;
    let otherPct = (otherVotes / totalVotes) * 100;

    let results = [
      { party: "rep", pct: repPct },
      { party: "dem", pct: demPct },
      { party: "other", pct: otherPct }
    ];
    results.sort((a, b) => b.pct - a.pct);

    let first = results[0];
    let second = results[1];

    let repSeats = 0, demSeats = 0, otherSeats = 0;

    // === Seat Allocation Logic ===
    if (first.pct >= 66) {
      if (first.party === "rep") repSeats = 2;
      else if (first.party === "dem") demSeats = 2;
      else otherSeats = 2;
    } else if (first.pct >= 55 && (first.pct - second.pct) > 10) {
      if (first.party === "rep") repSeats = 2;
      else if (first.party === "dem") demSeats = 2;
      else otherSeats = 2;
    } else if ((first.pct - second.pct) <= 12) {
      if (first.party === "rep") repSeats += 1;
      else if (first.party === "dem") demSeats += 1;
      else otherSeats += 1;

      if (second.party === "rep") repSeats += 1;
      else if (second.party === "dem") demSeats += 1;
      else otherSeats += 1;
    } else {
      if (first.party === "rep") repSeats = 2;
      else if (first.party === "dem") demSeats = 2;
      else otherSeats = 2;
    }

    Q.rep_senate_r += repSeats;
    Q.dem_senate_r += demSeats;
    Q.other_senate_r += otherSeats;
  }

  // === 4. Compute seat changes ===
  for (let party of Q.parties) {
    let cur = Q[party + "_senate_r"] || 0;
    let old = Q["old_" + party + "_senate_r"];
    let change = cur - old;
    Q["change_" + party + "_senate_r"] = change;
    Q["str_change_" + party + "_senate_r"] = (change > 0 ? "+" : "") + change;
    Q[party + "_senate_r_disp"] = Q.use_decimals ? cur.toFixed(1) : cur;
  }

  // === 5. Update display values ===
  Q.display_rep_senate = Q.rep_senate_r;
  Q.display_dem_senate = Q.dem_senate_r;
  Q.display_other_senate = Q.other_senate_r;

  // === 6. Record election result ===
  let result = { date: Q.year + "-" + Q.month };
  for (let party of Q.parties) {
    result[party] = Q[party + "_senate_r"];
  }
  Q.senate_election_records = Q.senate_election_records || [];
  Q.senate_election_records.push(result);

  // === 7. Largest party and majority ===
  Q.largest_party_senate = "rep";
  if (Q.dem_senate_r >= Q.rep_senate_r && Q.dem_senate_r >= Q.other_senate_r) Q.largest_party_senate = "dem";
  if (Q.other_senate_r >= Q.rep_senate_r && Q.other_senate_r >= Q.dem_senate_r) Q.largest_party_senate = "other";

  Q.republican_majority_senate = Q.rep_senate_r;
  Q.democrat_majority_senate = Q.dem_senate_r;
  Q.other_majority_senate = Q.other_senate_r;

  let totalSeats = Q.total_senate_seats || (Q.rep_senate_r + Q.dem_senate_r + Q.other_senate_r);
  let repPctSeats = (Q.rep_senate_r / totalSeats) * 100;

  if (repPctSeats >= 75) {
    Q.sen_majority = 3;
  } else if (repPctSeats >= 50) {
    Q.sen_majority = 2;
  } else {
    Q.sen_majority = 0;
  }

!}
on-display: {!
  function drawChart() {
    var chartData = [
      {
        id: "republicans",
        seats: Math.round(Q.rep_senate_r),
        color: "#E3000F",
        outline: "#E3000F"
      },
      {
        id: "democrats",
        seats: Math.round(Q.dem_senate_r),
        color: "#0015BC",
        outline: "#0015BC"
      },
      {
        id: "others",
        seats: Math.round(Q.other_senate_r),
        color: "#00cc00",
        outline: "#a0a0a0"
      }
    ].filter(d => d.seats > 0);

    var width = Math.min(500, document.getElementById('content').offsetWidth - 50);
    var container = d3.select("#reichstag");
    if (container.empty()) {
      container = d3.select("#content").append("svg").attr("id", "reichstag");
    }
    container.attr("width", width).attr("height", width / 2).html("");

    var parliament = d3.parliament().width(width).innerRadiusCoef(0.4);
    container.data([chartData]).call(parliament);
  }

  if (!window.d3) {
    var script = document.createElement('script');
    script.src = 'https://d3js.org/d3.v7.min.js';
    script.onload = function() {
      var subscript = document.createElement('script');
      subscript.src = 'https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js';
      subscript.onload = drawChart;
      document.head.appendChild(subscript);
    };
    document.head.appendChild(script);
  } else if (!window.d3.parliament) {
    var script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js';
    script.onload = drawChart;
    document.head.appendChild(script);
  } else {
    drawChart();
  }
!}
go-to: house_makeup

= Senate Election Results

{!<svg id="reichstag" style="width: 500px; height: 250px;"> </svg>!}

{!<table>!}
{!<tr><td>Party</td><td>Seats</td><td>Change</td></tr>!}

{!<tr><td><div class="box" style='background-color:#E3000F; outline: 2px solid;'> </div> !} **Republicans:** {!</td><td>!} [+ display_rep_senate +] seats {!</td><td>!} [+ str_change_rep_senate_r +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#0015BC'> </div> !} Democrats: {!</td><td>!} [+ display_dem_senate +] seats {!</td><td>!} [+ str_change_dem_senate_r +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#a0a0a0'> </div> !} Others: {!</td><td>!} [+ display_other_senate +] seats {!</td><td>!} [+ str_change_other_senate_r +] {!</td></tr>!}
{!</table>!}

@house_makeup

- @simple_majority
- @super_majority
- @defeat
- @tie
- @plurality

@simple_majority
title: Republicans get a simple majority
subtitle: Republicans: [+ rep_senate_r +] seats
view-if: sen_majority = 2

The Republicans have gained a simple majority in the Senate!

@super_majority
title: Republicans get a super majority
subtitle: Republicans: [+ rep_senate_r +] seats
view-if: sen_majority = 3

The Republicans have gained a supermajority in the Senate! Now they can override any presidential veto.

@defeat
title: Republicans have lost the election
subtitle: Repubicans: [+ rep_senate_r +] seats
view-if: sen_majority = 0 and (dem_senate_r > rep_senate_r or other_senate_r > rep_senate_r)

The Republicans have lost control of the Senate to the Democrats.

@tie
title: A TIE?!?!?!?
subtitle: Republicans and Democrats: [+ rep_senate_r +] â€“ [+ dem_senate_r +]
view-if: rep_senate_r = dem_senate_r
on-arrival: {!
  if (Q.president_party = "rep") {
    Q.sen_majority = 2;
  } else if (Q.president_party = "dem") {
    Q.sen_majority = 2;
  } else {
    Q.sen_majority = 0;
  }
!}

In a stunning turn of events, the Senate election has ended in a tie!
[? if president_party = rep: The Vice President can cast the deciding vote in favor of the Republicans. ?]
[? if president_party = dem: The Vice President can cast the deciding vote in favor of the Democrats. ?]

@plurality
title: Republicans Are the Largest Party
subtitle: Republicans: [+ rep_senate_r +] seats
view-if: sen_majority = 0 and (rep_senate_r > dem_senate_r and rep_senate_r > other_senate_r)

The Republicans are the largest party in the Senate but fall short of a majority. They will need to form coalitions or negotiate to pass any legislation.