title: Senate Elections
new-page: true
tags: event
priority: -1
view-if: (year = next_senate_election_year and month >= next_senate_election_month) or (year > next_senate_election_year)
on-departure: month_actions += 1; in_election = 0; next_senate_election_year = next_senate_election_year + 2; n_elections += 1; next_senate_election_time = time + 24;
set-jump: post_election_1928

= Elections, [+ month : month +] [+ year +]

The Senate elections are to be held now.

- @Senate_election_algorithm: May we do our best...

@post_election_1928
on-arrival: {!
// Reset seat counts
Q.rep_senate_r = 0;
Q.dem_senate_r = 0;
Q.other_senate_r = 0;

// Config: Make sure TOTAL_SEATS is defined somewhere, fallback to 72 if not
const TOTAL_SEATS = Q.TOTAL_SEATS;

const VACANT_SEATS = Q.vacant_senate || 0;
Q.vacant_senate_r = VACANT_SEATS;

// Save old results
for (let party of Q.parties) {
    Q['old_' + party + '_senate_r'] = Q[party + '_senate_r'] || 0;
}

// Initialize vote counts
let partyVotes = {};
for (let party of Q.parties) {
    partyVotes[party] = 0;
}

// Confirm your parties and keys by printing
console.log("Parties:", Q.parties);
console.log("States:", Q.states);
console.log("Classes:", Q.classes);

// Calculate total votes weighted by population and support
for (let state of Q.states) {
    for (let cls of Q.classes) {
        const pop = Q[state + '_' + cls] || 0;
        for (let party of Q.parties) {
            // Make sure these keys exist and are numbers
            const supportKey = cls + '_' + party;
            const support = Q[supportKey];
            if (support === undefined) {
                console.warn(`Missing support data for ${supportKey}, assuming 0`);
            }
            const supportValue = typeof support === 'number' ? support : 0;

            partyVotes[party] += (pop * supportValue) / 100;
        }
    }
}

// Log raw votes to debug zeros
console.log("Raw party votes before normalization:", partyVotes);

// Sum total votes (exclude vacant seats)
let totalVotes = 0;
for (let party of Q.parties) {
    totalVotes += partyVotes[party];
}

// Avoid division by zero
if (totalVotes === 0) {
    console.warn("Total votes calculated as zero. Assigning equal shares.");
    let equalShare = TOTAL_SEATS / Q.parties.length;
    for (let party of Q.parties) {
        Q[party + '_senate_r'] = Math.round(equalShare);
    }
} else {
    // Allocate seats proportionally to TOTAL_SEATS minus vacant seats
    let seatsToAllocate = TOTAL_SEATS - VACANT_SEATS;
    for (let party of Q.parties) {
        let rawVotes = partyVotes[party];

        if (Q.constitutional_reform > 0) {
            const threshold = Q.electoral_threshold || 0;
            const isBanned = Q[party + '_banned'] || false;
            const belowThreshold = (rawVotes / totalVotes) * 100 < threshold;

            if (belowThreshold || (threshold > 1 && party === 'other') || isBanned) {
                Q[party + '_senate_r'] = 0;
            } else {
                Q[party + '_senate_r'] = Math.round(rawVotes * seatsToAllocate / totalVotes);
            }
        } else {
            Q[party + '_senate_r'] = Math.round(rawVotes * seatsToAllocate / totalVotes);
        }

        // Make sure these are numbers
        Q[party + '_senate_r'] = Q[party + '_senate_r'] || 0;

        Q[party + '_senate_r_disp'] = Q[party + '_senate_r'];
        Q['change_' + party + '_senate_r'] = Q[party + '_senate_r'] - Q['old_' + party + '_senate_r'];
        let sign = Q['change_' + party + '_senate_r'] > 0 ? '+' : '';
        Q['str_change_' + party] = sign + Q['change_' + party + '_senate_r'];
    }
}

// Vacant seat change
Q.change_vacant = Q.vacant_senate_r - (Q.old_vacant_senate_r || 0);
Q.str_change_vacant = (Q.change_vacant >= 0 ? '+' : '') + Q.change_vacant;
Q.old_vacant_senate_r = Q.vacant_senate_r;

// Determine largest party
Q.largest_party = 'rep';
if (Q.dem_senate_r >= Q.rep_senate_r && Q.dem_senate_r >= Q.other_senate_r) {
    Q.largest_party = 'dem';
}
if (Q.other_senate_r >= Q.rep_senate_r && Q.other_senate_r >= Q.dem_senate_r) {
    Q.largest_party = 'other';
}

// Store majorities
Q.republican_majority = Q.rep_senate_r;
Q.democrat_majority = Q.dem_senate_r;
Q.other_majority = Q.other_senate_r;

// Record result for history log
let result = { date: new Date(Q.year, Q.month - 1) };
for (let party of Q.parties) {
    result[party] = Q[party + '_senate_r'];
}
Q.election_records.push(result);

console.log("Final Senate seats - Republicans:", Q.rep_senate_r, "Democrats:", Q.dem_senate_r, "Others:", Q.other_senate_r, "Vacant:", Q.vacant_senate_r);

// For display in UI
Q.display_rep_senate = Q.rep_senate_r;
Q.display_dem_senate = Q.dem_senate_r;
Q.display_other_senate = Q.other_senate_r;
Q.display_vacant_senate = Q.vacant_senate_r;
!}
on-display: {!
  function loadScript(src, callback) {
    var script = document.createElement('script');
    script.src = src;
    script.onload = callback;
    document.head.appendChild(script);
  }

  function drawChart() {
    var chartData = [
      {
        id: "republicans",
        seats: Math.round(Q.rep_senate_r),
        color: "#E3000F",
        outline: "#E3000F"
      },
      {
        id: "democrats",
        seats: Math.round(Q.dem_senate_r),
        color: "#0015BC",
        outline: "#0015BC"
      },
      {
        id: "others",
        seats: Math.round(Q.other_senate_r),
        color: "#00cc00",
        outline: "#a0a0a0"
      },
      {
        id: "vacants",
        seats: Q.vacant_senate_r,
        color: "#DCCA4A",
        outline: "#777777"
      }
    ].filter(d => d.seats > 0);

    var width = Math.min(500, document.getElementById('content').offsetWidth - 50);

    var container = d3.select("#reichstag");
    if (container.empty()) {
      container = d3.select("#content").append("svg").attr("id", "reichstag");
    }
    container.attr("width", width)
             .attr("height", width / 2)
             .html("");

    var parliament = d3.parliament()
      .width(width)
      .innerRadiusCoef(0.4);
    container.data([chartData]).call(parliament);
  }

  if (!window.d3) {
    loadScript('https://d3js.org/d3.v7.min.js', function() {
      loadScript('https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js', drawChart);
    });
  } else if (!window.d3.parliament) {
    loadScript('https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js', drawChart);
  } else {
    drawChart();
  }
!}
go-to: coalition_menu

= Election results

{!<svg id="reichstag" style="width: 500px; height: 250px;"> </svg>!}

{!<table>!} 
{!<tr><td>Party</td><td>Vote share</td><td>% Change</td></tr>!}
{!<tr><td><div class="box" style='background-color:#E3000F; outline: 2px; outline-style: solid;'> </div> !} **Republicans:** {!</td><td>!} **[+ display_rep_senate +] seats** {!</td><td>!} **[+ str_change_rep +]** {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#0015BC'> </div> !}Democrats: {!</td><td>!} [+ dem_senate_r +] seats {!</td><td>!} [+ display_dem_senate +] {!</td></tr>!}
 
{!<tr><td><div class="box" style='background-color:#a0a0a0'> </div> !} Others: {!</td><td>!} [+ other_senate_r +] seats {!</td><td>!} [+ display_other_senate +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#DCCA4A'> </div> !} Vacants: {!</td><td>!} [+ vacant_senate +] seats {!</td><td>!} [+ display_vacant_senate +] {!</td></tr>!}
{!</table>!}

@coalition_menu

- @simple_majority
- @super_majority
- @defeat
- @tie

@simple_majority
title: Republicans get a simple majority
subtitle: Repubicans: [+ rep_senate_r +] seats
view-if: {! (Q.rep_senate_r >= Math.floor(TOTAL_SEATS / 2) + 1) !}
on-arrival: sen_majority = 1;

The Republicans have gained a simple majority in the Senate!

@super_majority
title: Republicans get a super majority
subtitle: Repubicans: [+ rep_senate_r +] seats
view-if: {! (Q.rep_senate_r >= Math.floor(TOTAL_SEATS * 2 / 3)) !}
on-arrival: sen_majority = 1;

The Republicans have gained a supermajority in the Senate! Now they can override any presidential veto.

@defeat
title: Republicans have lost the election
subtitle: Repubicans: [+ rep_senate_r +] seats
view-if: dem_senate_r > rep_senate_r 
on-arrival: sen_majority = 0;

The Republicans have lost control of the Senate to the Democrats.

@tie
title: A TIE?!?!?!?
subtitle: I guess there is no government today
view-if: rep_senate_r = dem_senate_r
on-arrival: sen_majority = 0;

In a complete shock, the Senate election has ended in a tie! [? if president_party = rep: But we have the VP on our side who can serve as the tiebreaking vote ?][? if president_party = dem: But the democrats have the VP their our side who can serve as the tiebreaking vote ?]
