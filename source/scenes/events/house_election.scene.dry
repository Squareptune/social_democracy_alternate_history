title: House Elections
new-page: true
tags: event
priority: -1
view-if: (year = next_house_election_year and month >= next_house_election_month) or (year > next_house_election_year)
on-departure: month_actions += 1; in_election = 0; next_house_election_year += 2; n_elections += 1; next_house_election_time = time + 24;

= Elections, [+ month : month +] [+ year +]

The House elections are to be held now.

- @House_election_algorithm: May we do our best...

@House_election_algorithm
on-arrival: {!

  // Save old seat values
  for (let party of Q.parties) {
    Q["old_" + party + "_r"] = Q[party + "_r"] || 0;
  }

  // === 1. Recalculate national class-party support averages ===
  for (let cls of Q.classes) {
    let totalPop = 0;
    let totalSupport = { rep: 0, dem: 0, other: 0 };

    for (let state of Q.states) {
      let pop = Q[state + "_" + cls] || 0;
      totalPop += pop;

      totalSupport.rep += pop * (Q[state + "_" + cls + "_rep"] || 0);
      totalSupport.dem += pop * (Q[state + "_" + cls + "_dem"] || 0);
      totalSupport.other += pop * (Q[state + "_" + cls + "_other"] || 0);
    }

    Q[cls + "_rep"] = totalPop ? totalSupport.rep / totalPop : 0;
    Q[cls + "_dem"] = totalPop ? totalSupport.dem / totalPop : 0;
    Q[cls + "_other"] = totalPop ? totalSupport.other / totalPop : 0;
  }

  // === 2. Calculate raw vote totals using blended support (80% local, 20% national) ===
  let repVotes = 0;
  let demVotes = 0;
  let otherVotes = 0;

  for (let state of Q.states) {
    for (let cls of Q.classes) {
      let pop = Q[state + "_" + cls] || 0;

      // Local support
      let rep = Q[state + "_" + cls + "_rep"] || 0;
      let dem = Q[state + "_" + cls + "_dem"] || 0;
      let other = Q[state + "_" + cls + "_other"] || 0;

      // National modifiers
      let repMod = Q[cls + "_rep"] || 0;
      let demMod = Q[cls + "_dem"] || 0;
      let otherMod = Q[cls + "_other"] || 0;

      // Blend: 80% local, 20% national
      let adjRep = 0.8 * rep + 0.2 * repMod;
      let adjDem = 0.8 * dem + 0.2 * demMod;
      let adjOther = 0.8 * other + 0.2 * otherMod;

      let totalPct = adjRep + adjDem + adjOther;
      if (totalPct === 0) continue;

      repVotes += pop * (adjRep / totalPct);
      demVotes += pop * (adjDem / totalPct);
      otherVotes += pop * (adjOther / totalPct);
    }
  }

  // === 3. Allocate seats proportionally ===
  let totalVotes = repVotes + demVotes + otherVotes;
  let totalSeats = Q.total_house_seats || 241;

  let repSeats = Math.floor((repVotes / totalVotes) * totalSeats);
  let demSeats = Math.floor((demVotes / totalVotes) * totalSeats);
  let otherSeats = totalSeats - repSeats - demSeats; // balance exactly

  Q.rep_r = repSeats;
  Q.dem_r = demSeats;
  Q.other_r = otherSeats;

  // === 4. Track seat changes ===
  for (let party of Q.parties) {
    let cur = Q[party + "_r"];
    let old = Q["old_" + party + "_r"];
    let change = cur - old;
    Q["change_" + party + "_r"] = change;
    Q["str_change_" + party + "_r"] = (change > 0 ? "+" : "") + change;
    Q[party + "_r_disp"] = Q.use_decimals ? cur.toFixed(1) : cur;
  }

  // === 5. Largest party tracker ===
  Q.largest_party_r = "rep";
  if (Q.dem_r >= Q.rep_r && Q.dem_r >= Q.other_r) Q.largest_party_r = "dem";
  if (Q.other_r >= Q.rep_r && Q.other_r >= Q.dem_r) Q.largest_party_r = "other";

  // === 6. Majority display vars ===
  Q.republican_majority_r = Q.rep_r;
  Q.democrat_majority_r = Q.dem_r;
  Q.other_majority_r = Q.other_r;

  // === 7. Record the result ===
  let result = { date: Q.year + "-" + Q.month };
  for (let party of Q.parties) {
    result[party] = Q[party + "_r"];
  }
  Q.house_election_records = Q.house_election_records || [];
  Q.house_election_records.push(result);

!}
on-display: {!
  function drawChart() {
    var chartData = [
      {
        id: "republicans",
        seats: Math.round(Q.rep_r),
        color: "#E3000F",
        outline: "#E3000F"
      },
      {
        id: "democrats",
        seats: Math.round(Q.dem_r),
        color: "#0015BC",
        outline: "#0015BC"
      },
      {
        id: "others",
        seats: Math.round(Q.other_r),
        color: "#00cc00",
        outline: "#a0a0a0"
      }
    ].filter(d => d.seats > 0);

    var width = Math.min(500, document.getElementById('content').offsetWidth - 50);

    var container = d3.select("#houseChart");
    if (container.empty()) {
      container = d3.select("#content").append("svg").attr("id", "houseChart");
    }
    container.attr("width", width)
             .attr("height", width / 2)
             .html("");

    var parliament = d3.parliament().width(width).innerRadiusCoef(0.4);
    container.data([chartData]).call(parliament);
  }

  if (!window.d3) {
    var script = document.createElement('script');
    script.src = 'https://d3js.org/d3.v7.min.js';
    script.onload = function() {
      var subscript = document.createElement('script');
      subscript.src = 'https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js';
      subscript.onload = drawChart;
      document.head.appendChild(subscript);
    };
    document.head.appendChild(script);
  } else if (!window.d3.parliament) {
    var script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js';
    script.onload = drawChart;
    document.head.appendChild(script);
  } else {
    drawChart();
  }
!}
go-to: house_menu

= House Election Results

{!<svg id="houseChart" style="width: 500px; height: 250px;"> </svg>!}

{!<table>!} 
{!<tr><td>Party</td><td>Seats</td><td>Change</td></tr>!}

{!<tr><td><div class="box" style='background-color:#E3000F; outline: 2px solid;'> </div> !} **Republicans:** {!</td><td>!} [+ rep_r_disp +] seats {!</td><td>!} [+ str_change_rep_r +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#0015BC'> </div> !} Democrats: {!</td><td>!} [+ dem_r_disp +] seats {!</td><td>!} [+ str_change_dem_r +] {!</td></tr>!}
 
{!<tr><td><div class="box" style='background-color:#a0a0a0'> </div> !} Others: {!</td><td>!} [+ other_r_disp +] seats {!</td><td>!} [+ str_change_other_r +] {!</td></tr>!}
{!</table>!}

@house_menu

- @house_simple_majority
- @house_super_majority
- @house_defeat
- @house_tie

@house_simple_majority
title: Republicans gain a majority in the House
subtitle: Republicans: [+ rep_r +] seats
view-if: {! rep_r > Q.total_house_seats / 2 !}
on-arrival: house_majority = 1;

The Republicans have secured a majority in the House of Representatives.

@house_super_majority
title: Republicans secure a supermajority
subtitle: Republicans: [+ rep_r +] seats
view-if: {! rep_r >= Math.ceil(Q.total_house_seats * (2/3)) !}
on-arrival: house_majority = 1;

With two-thirds of the House, Republicans now wield veto-proof power.

@house_defeat
title: Republicans lose the House
subtitle: Republicans: [+ rep_r +] seats
view-if: dem_r > rep_r
on-arrival: house_majority = 0;

The Democrats have taken control of the House of Representatives.

@house_tie
title: The House is tied!
subtitle: Both parties are neck and neck
view-if: rep_r = dem_r
on-arrival: house_majority = 0;

A tied House will cause major legislative deadlock in the months ahead.
