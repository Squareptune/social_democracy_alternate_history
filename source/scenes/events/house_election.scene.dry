title: House Elections
new-page: true
tags: event
priority: -1
view-if: (year = next_house_election_year and month >= next_house_election_month) or (year > next_house_election_year)
on-departure: month_actions += 1; in_election = 0; next_house_election_year += 2; n_elections += 1; next_house_election_time = time + 24;
set-jump: post_house_election

= Elections, [+ month : month +] [+ year +]

The House elections are to be held now.

- @House_election_algorithm: May we do our best...

@post_house_election
 // 1. Initialize support displays
  const classes = ["freemen","workers","middle_class","rural","immigrant_laborers","unemployed"];
  const parties = ["rep","dem","other"];
  Q.rep_r = Q.dem_r = Q.other_r = 0;

  for (let cls of classes) for (let party of parties) {
    let base = Q[cls + "_" + party] || 0;
    let mod = Q[cls + "_" + party + "_modifier"] || 0;
    Q[cls + "_" + party + "_display"] = base + mod;
  }

  // 2. Tally votes across all states
  for (let state of Q.states) {
    for (let cls of classes) {
      let pop = Q[state + "_" + cls] || 0;
      let rep = Q[state + "_" + cls + "_rep"] || 0;
      let dem = Q[state + "_" + cls + "_dem"] || 0;
      let other = Q[state + "_" + cls + "_other"] || 0;
      let total = rep + dem + other;
      if (!total) continue;
      Q.rep_r += pop * rep/total;
      Q.dem_r += pop * dem/total;
      Q.other_r += pop * other/total;
    }
  }

  // 3. Save old values & compute changes
  for (let party of parties) {
    Q["old_" + party + "_r"] = Q["old_" + party + "_r"] || 0;
    let cur = Q[party + "_r"];
    let change = Math.round(cur - Q["old_" + party + "_r"]);
    Q["change_" + party + "_r"] = change;
    Q["str_change_" + party + "_r"] = (change>0?"+":"") + change;
    Q["display_" + party + "_r"] = Math.round(cur);
    Q["old_" + party + "_r"] = Math.round(cur);
  }

  // 4. Largest party & record
  Q.largest_party_r = Q.rep_r >= Q.dem_r && Q.rep_r >= Q.other_r ? "rep"
                     : Q.dem_r >= Q.other_r ? "dem" : "other";

  let result = {date: Q.year+"-"+Q.month};
  for (let p of parties) result[p] = Math.round(Q[p + "_r"]);
  Q.house_election_records = Q.house_election_records || [];
  Q.house_election_records.push(result);
!}
on-display: {!
  function drawChart() {
    var chartData = [
      {
        id: "republicans",
        seats: Math.round(Q.rep_r),
        color: "#E3000F",
        outline: "#E3000F"
      },
      {
        id: "democrats",
        seats: Math.round(Q.dem_r),
        color: "#0015BC",
        outline: "#0015BC"
      },
      {
        id: "others",
        seats: Math.round(Q.other_r),
        color: "#00cc00",
        outline: "#a0a0a0"
      }
    ].filter(d => d.seats > 0);

    var width = Math.min(500, document.getElementById('content').offsetWidth - 50);

    var container = d3.select("#houseChart");
    if (container.empty()) {
      container = d3.select("#content").append("svg").attr("id", "houseChart");
    }
    container.attr("width", width)
             .attr("height", width / 2)
             .html("");

    var parliament = d3.parliament().width(width).innerRadiusCoef(0.4);
    container.data([chartData]).call(parliament);
  }

  if (!window.d3) {
    var script = document.createElement('script');
    script.src = 'https://d3js.org/d3.v7.min.js';
    script.onload = function() {
      var subscript = document.createElement('script');
      subscript.src = 'https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js';
      subscript.onload = drawChart;
      document.head.appendChild(subscript);
    };
    document.head.appendChild(script);
  } else if (!window.d3.parliament) {
    var script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/d3-parliament@1.0.3/build/d3-parliament.min.js';
    script.onload = drawChart;
    document.head.appendChild(script);
  } else {
    drawChart();
  }
!}
go-to: house_coalition_menu

= House Election Results

{!<svg id="houseChart" style="width: 500px; height: 250px;"> </svg>!}

{!<table>!} 
{!<tr><td>Party</td><td>Seats</td><td>Change</td></tr>!}

{!<tr><td><div class="box" style='background-color:#E3000F; outline: 2px solid;'> </div> !} **Republicans:** {!</td><td>!} [+ display_rep_r +] seats {!</td><td>!} [+ str_change_rep_r +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#0015BC'> </div> !} Democrats: {!</td><td>!} [+ display_dem_r +] seats {!</td><td>!} [+ str_change_dem_r +] {!</td></tr>!}
 
{!<tr><td><div class="box" style='background-color:#a0a0a0'> </div> !} Others: {!</td><td>!} [+ display_other_r +] seats {!</td><td>!} [+ str_change_other_r +] {!</td></tr>!}
{!</table>!}

@house_coalition_menu

- @house_simple_majority
- @house_super_majority
- @house_defeat
- @house_tie

@house_simple_majority
title: Republicans gain a majority in the House
subtitle: Republicans: [+ rep_r +] seats
view-if: {! rep_r > Q.total_house_seats / 2 !}
on-arrival: house_majority = 1;

The Republicans have secured a majority in the House of Representatives.

@house_super_majority
title: Republicans secure a supermajority
subtitle: Republicans: [+ rep_r +] seats
view-if: {! rep_r >= Math.ceil(Q.total_house_seats * (2/3)) !}
on-arrival: house_majority = 1;

With two-thirds of the House, Republicans now wield veto-proof power.

@house_defeat
title: Republicans lose the House
subtitle: Republicans: [+ rep_r +] seats
view-if: dem_r > rep_r
on-arrival: house_majority = 0;

The Democrats have taken control of the House of Representatives.

@house_tie
title: The House is tied!
subtitle: Both parties are neck and neck
view-if: rep_r = dem_r
on-arrival: house_majority = 0;

A tied House will cause major legislative deadlock in the months ahead.
